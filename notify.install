<?php
/**
 * @file
 * Install, update and uninstall functions for the notify module.
 */


/**
 * Implements hook_schema().
 */
function notify_schema() {
  $schema['notify'] = array(
    'fields' => array(
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '10',
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '2',
      ),
      'node' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '2',
      ),
      'comment' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '2',
      ),
      'attempts' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '4',
      ),
      'teasers' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
        'disp-width' => '4',
      ),
    ),
    'primary key' => array('uid'),
  );

  $schema['notify_bytecount'] = array(
    'description' => 'Stores a some signature used to determine if node has really changed.',
    'fields' => array(
      'id' => array(
        'description' => 'primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'nid' => array(
        'description' => '{node}.nid of the node the byte count is associated with.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'bytes' => array(
        'description' => 'number of bytes it held last time we notified about it.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['notify_subscriptions'] = array(
    'description' => 'Stores custom subscriptions to content types.',
    'fields' => array(
      'id' => array(
        'description' => 'primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => '{users}.uid that subscribes to this type.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => '{node}.nid of the subscribed node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'type' => array(
        'description' => 'machine-readable name of the subscribed type',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('id'),
  );

  $schema['notify_unpublished_queue'] = array(
    'description' => 'Stores list of unpublished contents to determine what content have been published since last notification.',
    'fields' => array(
      'id' => array(
        'description' => 'primary key',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'cid' => array(
        'description' => '{comment}.cid of the unpublished comment, or 0 if it is a node.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => '{node}.nid of the uinpublished node, or {node}.nid to the node which the comment is a reply.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
  );

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function notify_uninstall() {
  // Delete my variables.
  global $conf;
  db_delete('variable')
  ->condition('name', 'notify_%', 'LIKE')
  ->execute();
  cache_clear_all('variables', 'cache');
  unset($conf);
}

/**
 * Move settings from variables to config.
 */
function notify_update_1000() {
  // Migrate variables to config.
  $config = config('notify.settings');
  $config->set('notify_attempts', update_variable_get('notify_attempts', '1'));
  $config->set('notify_batchsize', update_variable_get('notify_batchsize', '100'));
  $config->set('notify_def_comment', update_variable_get('notify_def_comment', '0'));
  $config->set('notify_def_node', update_variable_get('notify_def_node', '1'));
  $config->set('notify_def_teasers', update_variable_get('notify_def_teasers', '0'));
  $config->set('notify_include_updates', update_variable_get('notify_include_updates', '0'));
  $config->set('notify_multilingual', update_variable_get('notify_multilingual', '1'));
  $config->set('notify_period', update_variable_get('notify_period', '86400'));
  $config->set('notify_reg_default', update_variable_get('notify_reg_default', '1'));
  $config->set('notify_send_hour', update_variable_get('notify_send_hour', '9'));
  $config->set('notify_skip_comments', update_variable_get('notify_skip_comments', ''));
  $config->set('notify_skip_nodes', update_variable_get('notify_skip_nodes', ''));
  $config->set('notify_unpublished', update_variable_get('notify_unpublished', '1'));
  $config->set('notify_unverified', update_variable_get('notify_unverified', '0'));
  $config->set('notify_watchdog', update_variable_get('notify_watchdog', '0'));
  $config->set('notify_weightur', update_variable_get('notify_weightur', '0'));
  $config->save();

  // Set environment-specific variables.
  state_set('notify_cron_next', update_variable_get('notify_cron_next', '0'));
  state_set('notify_num_sent', update_variable_get('notify_num_sent', '0'));
  state_set('notify_num_failed', update_variable_get('notify_num_failed', '0'));
  state_set('notify_send_last', update_variable_get('notify_send_last', '0'));
  state_set('notify_send_start', update_variable_get('notify_send_start', '0'));
  state_set('notify_users', update_variable_get('notify_users', ''));

  // Delete variables.
  update_variable_del('notify_attempts');
  update_variable_del('notify_batchsize');
  update_variable_del('notify_cron_next');
  update_variable_del('notify_def_comment');
  update_variable_del('notify_def_node');
  update_variable_del('notify_def_teasers');
  update_variable_del('notify_include_updates');
  update_variable_del('notify_multilingual');
  update_variable_del('notify_num_sent');
  update_variable_del('notify_num_failed');
  update_variable_del('notify_period');
  update_variable_del('notify_reg_default');
  update_variable_del('notify_send_hour');
  update_variable_del('notify_send_last');
  update_variable_del('notify_send_start');
  update_variable_del('notify_skip_comments');
  update_variable_del('notify_skip_nodes');
  update_variable_del('notify_unpublished');
  update_variable_del('notify_unverified');
  update_variable_del('notify_users');
  update_variable_del('notify_watchdog');
  update_variable_del('notify_weightur');
}

/**
 * Implements hook_update_last_removed().
 */
function notify_update_last_removed() {
  return 7003;
}